[{"title":"Hello World","url":"/2022/04/24/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"MyfirstBlog","url":"/2022/05/06/MyfirstBlog/","content":"\n现在可以说是真正意义上的我的第一个博客了，搭建这个博客花费了很多的时间和精力，起初搭建博客的目的是想学习学长那样用博客记录自己每一步的脚印，等走远之后再回头，给自己一个惊喜也说不定，那么开始，书写我的诗篇。\n\n"},{"title":"Markdown 基本语法","url":"/2022/08/24/Markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","content":"Markdown 基本语法初识一、标题Markdown 标题分为六级# 一级## 二级### 三级\n\n\n# 越多字越小\n二、引用&gt; 这是一段引用\n\n\n这是引用效果\n\n三、列表1. 有序列表番茄炒蛋的步骤：\n\n炒番茄\n\n炒鸡蛋\n\n混合番茄炒蛋\n\n\n2.无序列表\n这是无序列表\n\n无序列表就是没有数字啦\n\n\n- 无序列表* 也可以使用星号\n\n3.任务列表明天要做的事：\n\n \n吃饭\n\n \n睡觉\n\n \n看电影\n\n\n- [ ] 这是任务列表，可勾选完成。在中括号里输入字母x表示勾选\n\n四、代码块#include&lt;iostream&gt;using namespace std;int main(){    system(\"pause\");    return 0;}\n\n``` 代码语言 \n\n五、数学公式\n$$数学公式常用的指数和下标： 10^2  10^{-2}  CH_4  (101.01)_{10}$$\n\n六、表格\n\n\n姓名\n年龄\n学校\n\n\n\n余恃新\n19\n东北大学\n\n\n|姓名|年龄|学校||:---|---:|:---:||左对齐|右对齐|居中对齐|\n\n七、横线\n--- 三个横线自动生成**** * * 这些均可\n\n八、文字\n这是一段斜体\n\n这是一段粗体\n\n这是一段加粗斜体\n\n这是一段删除线\n\n\n1. *斜体* 或 —斜体—2. **粗体**3. ***加粗斜体***4. ~~删除线~~\n\n九、超链接1. 行内式\n[]里写链接文字，()里写链接地址, ()中的” “中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址  “链接标题”)这样的形式。链接地址与链接标题前有一个空格。\n1. 欢迎来到[力扣]（https://leetcode.cn/）2. 欢迎来到[力扣]（https://leetcode.cn/ \"力扣\"）\n\n\n欢迎来到力扣\n欢迎来到力扣\n\n\n\n2.参考式\n参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加\n[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。\n\n如果链接文字本身可以做为链接标记，你也可以写成[链接文字][] [链接文字]：链接地址的形式，见代码的最后一行。\n\n\n我经常去的几个网站[Google][ 1 ]、[Acwing][ 2 ]以及[自己的博客][ 3 ][Acwing][ 2 ]是一个不错的[网站][]。[ 1 ]: [http://www.google.com](http://www.google.com) \"Google\"[ 2 ]: [https://www.acwing.com/](https://www.acwing.com/) \"算法\"[ 3 ]: [https://incredible111.github.io/](https://incredible111.github.io/) \"Incredible\"[网站]: [https://www.acwing.com/](https://www.acwing.com/) \"算法\"\n\n我经常去的几个网站 Google、Acwing 以及自己的博客Acwing是一个不错的网站。\n3.自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样\n&lt;https://www.acwing.com/&gt;\n\n&lt;https://incredible111.github.io/&gt;\n更详细的内容https://m.runoob.com/markdown/\n","tags":["1"]},{"title":"进制转换","url":"/2022/08/30/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/","content":"进制转换Chapter 1 From Zero to One1. Positional number system (按位计数系统)\nbinary digit (二进制) — 逢二进一\n\noctal digit （八进制）—逢八进一\n\ndecimal digit (十进制) —逢十进一\n\nhexadecimal(hex) digital （十六进制）—逢16进一\n\n\n1） Decimal\nRadix-10 number system uses 10 notations for the digits(0~9)\n\nweight: \n\ne.g. 123.45 is expressed as :\n123.45 = \n\n\n\n十进制，以个位为第0位 (即 i = 0)，依次进行计算加和\n\n2）Binary\nRadix-2 number system uses 2 notations for the digits(0, 1)\n\nweight: \n\ne.g.  (101.1) 转换为十进制== \n\n\n\n二进制转换为十进制，系数×weight(基数),同样以个位 i = 0，依次进行计算加和\n\n3）Octal System\n组成：0、1、2、3、4、5、6、7\n\nweight: \n\ne.g.  \n\n\n\n\n八进制转换为十进制，系数×weight,同样以个位 i = 0，依次进行计算加和\n\n4）Hexadecimal\nRadix-16 number system uses 16 notations for the digits(0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F)\n\nweight: \n\ne.g.   \n\n\n\n\n十六进制中 A=10，B=11，C=12，D=13，E=14，F=15，系数×weight，以个位 i=0\n\nR to Decimal\nR进制数转换成十进制数的过程可用下式表示：\n\n\n\n\n\nR为weight（基数）\n\nDecimal to R\n\n注意书写顺序，整数部分先得到的数写在后面\n\n\n\n注意顺序，小数部分先得到的写在前面\n\ndecimal to binary\n两步\n\nInteger part (整数除2取余法)\n基于重复的十进制除以2\n\nFractional part (小数乘2取整法)\n基于重复的十进制乘以2\n\n\n\n\n\n整数示例\n\n\n\n小数示例\n\n\n\n十进制小数得到无限循环小数的示例\n\n\n\n十进制小数转换为八进制和十六进制的示例\n\n\nbinary &lt;——&gt; octal  &amp;&amp;  binary &lt;——&gt; hexadicimal\n以十进制为桥梁，都转化为十进制之后再相互转换\n\nothers\n\n三个二进制表示一个八进制    四个二进制表示一个十六进制\n可能不太好理解，换言之就是当二进制111再加一时要向前进一位，此时二进制111代表八进制的7，八进制的7再加一也需要向前进一位，达到了同步\n\n\n\ne.g. 2.2 将二进制转换为八进制，以小数点为分界，三个三个成一组，不够的添上0（如 10 变成 010），之后将每组的二进制转化为十进制的数字，直接书写即可\n\n\n\ne.g. 2.5 将十六进制转换为二进制，将每个数字代表的四位二进制从左往右按顺序书写即可\n\n"},{"title":"data structure","url":"/2022/09/05/data-structure/","content":"数据结构与算法绪论1.1 数据结构讨论的范畴1.3 算法和算法衡量一、算法特性一个算法必须满足以下五个重要特性\n\n有穷性\n算法中的每个步骤都能在有限的时间内完成。\n\n确定性\n对于每种情况下所应执行的操作，在算法中都有确切的规定，使算法的执行者或阅读者都能明确其含义及如何执行。并且在任何条件下，算法都只有一条执行路径。\n\n可行性\n算法中的所有操作都必须足够基本，都可以通过已经实现的基本操作运算有限次实现之。\n\n有输入\n作为算法加工对象的量值，通常体现为算法中的一组变量。有些输入量需要在算法执行过程中输入，而有的算法表面上可以没有输入，实际上已被嵌入算法之中。\n\n有输出\n它是一组与“输入”有确定关系的量值，是算法进行信息加工后得到的结果，这种确定关系即为算法的功能。\n\n\n二、算法设计的原则1.正确性首先，算法应当满足以特定的“规格说明”方式给出的需求。\n其次，对算法是否“正确”的理解可以有以下四个层次：\na．程序中不含语法错误；\nb．程序对于几组输入数据能够得出满足要求的结果；\nc．程序对于精心选择的、典型、苛刻且带有刁难性的几组输入数据\n能够得出满足要求的结果；\nd．程序对于一切合法的输入数据都能得出满足要求的结果；\n通常以第 c 层意义的正确性作为衡量一个算法是否合格的标准。\n2.可读性算法主要是为了人的阅读与交流，\n其次才是为计算机执行，因此算法应该易于人的理解；另一方面，晦涩难读的程序易于隐藏较多错误而难以调试。\n3.健壮性当输入的数据非法时，算法应当恰当地作出反映或进行相应处理，而不是产生莫名奇妙的输出结果。并且，处理出错的方法不应是中断程序的执行，而应是返回一个表示错误或错误性质的值，以便在更高的抽象层次上进行处理。\n4.高效率与低储存需求通常，效率指的是算法执行时间；存储量指的是算法执行过程中所需的最大存储空间，两者都与问题的规模有关。\n有效的算法\n一个算法如果能够在所要求的资源限制内(空间和时间)将问题解决好，称这个算法是有效的。一个算法的代价是算法消耗的资源量。\n\n权衡的概念： 每个数据结构都有相关的代价和效率的衡量。\n\n代价和效率：一个数据结构都将代价和效益联系在一起。一个数据结构需要一定的空间来存储它的每个数据项，一定的时间来执行单个基本操作和一定的程序设计工作。\n\n\n三、算法效率的衡量方法和准则通常有两种衡量算法效率的方法:\n\n事后统计法\n缺点：1．必须执行程序\n            2．其它因素掩盖算法本质\n\n事前分析估算法\n\n\n}对同一个问题运行四种不同算法，所用时间依赖于：算法，问题规模，语言，编译器和计 算机\n算法执行时间相关的因素1．算法选用的策略\n2．问题的规模\n3．编写程序的语言\n4．编译程序产生的机器代码的质量\n5．计算机执行指令的速度\n\n一个特定算法的“运行工作量”的大小，只依赖于问题的规模（通常用整数量n表示），或者说，它是问题规模的函数。\n\n\n渐进分析法\n渐进分析：忽略用来表示问题规模和时间关系的函数中不能显著改变函数数量级的部 分，其结果是原函数的近似值，该近似值在问题规模很大时会足够接近原值。\n\n•渐进分析是对资源开销的一种不精确的估计，它提供的是对算法所需资源开销进行评估的简单化模型，以便把注意力集中在最重要的部分。\n\n\n\n（渐进）时间复杂度\n\nO表示法类似于下图，表示为上界函数   Ω表示法为下界函数\n\n\n\n\n\n\n越往下时间复杂度越高\n\n\n\n规则1\n\ne.g.如果 T1(N) &#x3D; O(N2) 且 T2(N)&#x3D; O(N) 那么\n(a) T1(N) + T2(N) &#x3D; O(N2)\n(b) T1(N) * T2(N) &#x3D; O(N3)\n\n规则2\n\n\n规则3\n\n\n\nUsing L’Hopital’s rule to evaluate:\n\n\n\n如何估算算法的时间复杂度\n\n\n\n\n•算法的渐进时间复杂度考虑的只是对于问题规模的增长率，在难以精确计算基本操作语句执行次数的情况下，只需求出它关于n的增长率或数量级即可。\n•算法的时间复杂度通常以算法中关键操作重复执行的次数作为度量标准；\n• 被视作算法基本操作的一般是最深层循环内的语句。—— 算法的时间复杂度是由嵌套最深层语句的频度（该语句重复执行的次数）决定的。\n• 这种衡量效率的办法所得出的不是时间量，而是一种增长趋势的量度。它与软硬件环境无关，只暴露算法本身执行效率的优劣。\n\n\n算法复杂度考虑最差和平均，一般不考虑最佳\n\n四、算法的存储空间需求\n\n       若输入数据所占空间只取决于问题本身，和算法无关，则只需要分析除输入和程序之外的辅助变量所占额外空间。\n若所需额外空间相对于输入数据量来说是常数，则称此算法为原地工作\n"}]